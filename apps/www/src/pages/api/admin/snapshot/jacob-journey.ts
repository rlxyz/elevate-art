import type { ContractSnapshot } from '@server/common/ethers-snapshot-contract'
import createSnapshot from '@server/common/ethers-snapshot-contract'
import { isAddress } from 'ethers/lib/utils.js'
import type { NextApiRequest, NextApiResponse } from 'next'

const JACOB_RIGLIN_JOURNEY_SNAPSHOT: ContractSnapshot[] = [
  {
    // SuperRare
    name: 'SuperRare',
    address: '0xb932a70a57673d89f4acffbe830e8ed7f75fb9e0',
    contract: 'ERC721',
    chainId: 1,
    type: 'BY_CONTRACT_CALL',
    tokenIds: [
      23490, 23789, 24082, 24437, 25034, 25242, 25706, 26720, 26835, 27274, 27873, 28255, 28605, 29029, 29931, 32430, 39648, 39935, 40162,
      41421, 40638, 40367,
    ],
  },
  {
    // Reflections
    name: 'Reflections',
    address: '0x91a5d4f6e691432a58d5579ae45955210ec6a2f1',
    contract: 'ERC721',
    chainId: 1,
    type: 'BY_CONTRACT_CALL',
    tokenIds: Array.from({ length: 1111 }, (_, i) => i),
  },
  {
    // World Wonders
    name: 'World Wonders',
    address: '0x495f947276749ce646f68ac8c248420045cb7b5e',
    contract: 'ERC1155',
    chainId: 1,
    type: 'BY_ALCHEMY_API',
    tokenIds: [
      '14416656700475663864726672344569766568452912279528818547653479163716983324673',
      '14416656700475663864726672344569766568452912279528818547653479162617471696897',
      '14416656700475663864726672344569766568452912279528818547653479161517960069121',
      '14416656700475663864726672344569766568452912279528818547653479160418448441345',
      '14416656700475663864726672344569766568452912279528818547653479159318936813569',
      '14416656700475663864726672344569766568452912279528818547653479158219425185793',
      '14416656700475663864726672344569766568452912279528818547653479157119913558017',
      '14416656700475663864726672344569766568452912279528818547653479156020401930241',
      '14416656700475663864726672344569766568452912279528818547653479154920890302465',
      '14416656700475663864726672344569766568452912279528818547653479153821378674689',
      '14416656700475663864726672344569766568452912279528818547653479152721867046913',
      '14416656700475663864726672344569766568452912279528818547653479151622355419137',
      '14416656700475663864726672344569766568452912279528818547653479150522843791361',
      '14416656700475663864726672344569766568452912279528818547653479149423332163585',
      '14416656700475663864726672344569766568452912279528818547653479148323820535809',
      '14416656700475663864726672344569766568452912279528818547653479147224308908033',
      '14416656700475663864726672344569766568452912279528818547653479146124797280257',
      '14416656700475663864726672344569766568452912279528818547653479145025285652481',
      '14416656700475663864726672344569766568452912279528818547653479143925774024705',
      '14416656700475663864726672344569766568452912279528818547653479142826262396929',
      '14416656700475663864726672344569766568452912279528818547653479141726750769153',
      '14416656700475663864726672344569766568452912279528818547653479140627239141377',
      '14416656700475663864726672344569766568452912279528818547653479139527727513601',
      '14416656700475663864726672344569766568452912279528818547653479138428215885825',
      '14416656700475663864726672344569766568452912279528818547653479137328704258049',
      '14416656700475663864726672344569766568452912279528818547653479136229192630273',
      '14416656700475663864726672344569766568452912279528818547653479135129681002497',
      '14416656700475663864726672344569766568452912279528818547653479134030169374721',
      '14416656700475663864726672344569766568452912279528818547653479132930657746945',
      '14416656700475663864726672344569766568452912279528818547653479131831146119169',
      '14416656700475663864726672344569766568452912279528818547653479130731634491393',
      '14416656700475663864726672344569766568452912279528818547653479129632122863617',
      '14416656700475663864726672344569766568452912279528818547653479128532611235841',
      '14416656700475663864726672344569766568452912279528818547653479127433099608065',
      '14416656700475663864726672344569766568452912279528818547653479126333587980289',
      '14416656700475663864726672344569766568452912279528818547653479125234076352513',
      '14416656700475663864726672344569766568452912279528818547653479124134564724737',
      '14416656700475663864726672344569766568452912279528818547653479123035053096961',
      '14416656700475663864726672344569766568452912279528818547653479121935541469185',
      '14416656700475663864726672344569766568452912279528818547653479120836029841409',
      '14416656700475663864726672344569766568452912279528818547653479119736518213633',
      '14416656700475663864726672344569766568452912279528818547653479118637006585857',
      '14416656700475663864726672344569766568452912279528818547653479117537494958081',
      '14416656700475663864726672344569766568452912279528818547653479116437983330305',
      '14416656700475663864726672344569766568452912279528818547653479115338471702529',
      '14416656700475663864726672344569766568452912279528818547653479114238960074753',
      '14416656700475663864726672344569766568452912279528818547653479113139448446977',
      '14416656700475663864726672344569766568452912279528818547653479112039936819201',
      '14416656700475663864726672344569766568452912279528818547653479110940425191425',
      '14416656700475663864726672344569766568452912279528818547653479109840913563649',
    ],
  },
  {
    // NiftyGateway
    name: 'NiftyGateway Edition of 10',
    address: '0xf3ae37c78aa1c2c193193107599d675608be75d7',
    contract: 'ERC721',
    chainId: 1,
    type: 'BY_CONTRACT_CALL',
    tokenIds: [
      30200010007, 30200010008, 30200010006, 30200010004, 30200010003, 30200010009, 30200010002, 30200010001, 30200010005, 30200010010,
      30200020009, 30200020004, 30200020001, 30200020006, 30200020008, 30200020007, 30200020010, 30200020003, 30200020002, 30200020005,
    ],
  },
  {
    // NiftyGateway
    name: 'NiftyGateway Edition of 25',
    address: '0xf3ae37c78aa1c2c193193107599d675608be75d7',
    contract: 'ERC721',
    chainId: 1,
    type: 'BY_CONTRACT_CALL',
    tokenIds: [
      30200040025, 30200040024, 30200040023, 30200040022, 30200040021, 30200040020, 30200040019, 30200040018, 30200040017, 30200040016,
      30200040015, 30200040014, 30200040013, 30200040012, 30200040011, 30200040010, 30200040009, 30200040008, 30200040007, 30200040006,
      30200040005, 30200040004, 30200040003, 30200040002, 30200040001,

      30200030025, 30200030024, 30200030023, 30200030022, 30200030021, 30200030020, 30200030019, 30200030018, 30200030017, 30200030016,
      30200030015, 30200030014, 30200030013, 30200030012, 30200030011, 30200030010, 30200030009, 30200030008, 30200030007, 30200030006,
      30200030005, 30200030004, 30200030003, 30200030002, 30200030001,
    ],
  },
  {
    // NiftyGateway
    name: 'NiftyGateway OE',
    address: '0xa7e63b303d57da09597f7945b243d47edc562d99',
    contract: 'ERC721',
    chainId: 1,
    type: 'BY_CONTRACT_CALL',
    tokenIds: Array.from({ length: 68 }, (_, i) => String(i + 30300010001)),
  },
]

const index = async (req: NextApiRequest, res: NextApiResponse) => {
  const responses = JACOB_RIGLIN_JOURNEY_SNAPSHOT.map((x) =>
    createSnapshot(x).then((result) => {
      if (result.failed) {
        return res.status(500).json({ success: false, error: result.error })
      } else {
        return {
          header: x,
          body: {
            address: result.getValue(),
            analytics: {
              totalUniqueAddress: result.getValue().filter((v, i, a) => a.indexOf(v) === i).length,
              totalValidAddress: result.getValue().filter((v, i, a) => a.indexOf(v) === i && isAddress(v)).length,
              totalTokens: x.tokenIds.length,
            },
          },
        }
      }
    })
  )

  await Promise.all(responses).then((values) => {
    return res.status(200).json({ success: true, data: { all: values, addresses: values.map((x) => x?.body.address).flatMap((x) => x) } })
  })

  return res.status(500)
}

export default index
