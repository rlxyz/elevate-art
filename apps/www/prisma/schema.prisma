// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

enum ContractDeploymentAllowlistType {
    CLAIM
    PRESALE
}

enum ContractDeploymentStatus {
    PENDING
    VERIFYING
    DEPLOYED
    FAILED
}

enum AssetDeploymentType {
    BASIC
    GENERATIVE
}

enum AssetDeploymentStatus {
    PENDING
    DEPLOYED
    FAILED
}

enum AssetDeploymentBranch {
    PRODUCTION
    PREVIEW
}

enum RepositoryCategory {
    GENERATIVE_PHOTOGRAPHY
}

model User {
    id            String    @id @default(cuid())
    address       String    @unique @db.VarChar(42) // number of hexademical characters in eth address
    name          String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now())
    image         String?

    members     OrganisationMember[]
    deployments AssetDeployment[]
}

model Organisation {
    id        String   @id @default(cuid())
    name      String   @unique @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    type      String   @default("personal") @db.VarChar(255)

    repositories Repository[]
    members      OrganisationMember[]
    pendings     OrganisationPending[]

    description    String? @db.Text
    twitterUrl     String? @db.VarChar(255)
    discordUrl     String? @db.VarChar(255)
    instagramUrl   String? @db.VarChar(255)
    websiteUrl     String? @db.VarChar(255)
    logoImageUrl   String? @db.VarChar(255)
    bannerImageUrl String? @db.VarChar(255)

    @@map(name: "organisations")
}

model OrganisationMember {
    id             String       @id @default(cuid())
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
    organisationId String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @default(now())
    type           String       @default("admin") @db.VarChar(255)

    @@unique([userId, organisationId])
}

model OrganisationPending {
    id             String       @id @default(cuid())
    address        String       @db.VarChar(42)
    role           String       @db.VarChar(20) // shouldnt have default value as we can server to explicitly specific
    organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
    organisationId String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @default(now())

    @@unique([address, organisationId])
}

model Repository {
    id   String @id @default(cuid())
    name String @db.VarChar(255)

    tokenName String   @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    width  Int @default(600)
    height Int @default(600)

    category       RepositoryCategory?
    displayName    String?             @db.VarChar(255)
    description    String?             @db.Text
    bannerImageUrl String?             @db.VarChar(255)
    logoImageUrl   String?             @db.VarChar(255)
    artist         String?             @db.VarChar(255)
    license        String?             @db.VarChar(255)
    externalUrl    String?             @db.VarChar(255)

    layers      LayerElement[]
    collections Collection[]

    organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
    organisationId String

    assetDeployments    AssetDeployment[]
    contractDeployments ContractDeployment[]

    @@unique([organisationId, name], name: "repositoryIdentifier")
    @@map(name: "repositories")
}

model AssetDeployment {
    id            String @id @default(cuid())
    name          String @db.VarChar(255)
    layerElements Json

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    status AssetDeploymentStatus @default(PENDING)
    branch AssetDeploymentBranch @default(PREVIEW)
    type   AssetDeploymentType   @default(BASIC)

    totalSupply Int // based on collection.totalSupply
    generations Int // based on collection.generations
    slug        String @db.VarChar(255) // based on collection.name

    creator   User?   @relation(fields: [creatorId], references: [id], onDelete: SetNull)
    creatorId String?

    repositoryId String
    repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

    contractDeployment ContractDeployment?

    @@index([repositoryId, name], name: "assetDeploymentIdentifier")
    @@index([creatorId])
}

model ContractDeployment {
    id        String   @id @default(cuid())
    address   String   @db.VarChar(42)
    chainId   Int      @default(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    status ContractDeploymentStatus @default(PENDING)

    repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
    repositoryId String

    assetDeployment   AssetDeployment? @relation(fields: [assetDeploymentId], references: [id])
    assetDeploymentId String?          @unique

    whitelists ContractDeploymentAllowlist[]

    @@unique([address, chainId]) // there can be multiple deployments on different chains with same contract address
    @@index([repositoryId])
}

model ContractDeploymentAllowlist {
    id        String   @id @default(cuid())
    address   String   @db.VarChar(42)
    mint      Int      @default(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    contractDeployment   ContractDeployment @relation(fields: [contractDeploymentId], references: [id], onDelete: Cascade)
    contractDeploymentId String

    type ContractDeploymentAllowlistType

    @@unique([address, contractDeploymentId, type])
    @@index([contractDeploymentId])
}

model Collection {
    id          String @id @default(cuid())
    name        String @default("main") @db.VarChar(255)
    type        String @default("default") @db.VarChar(255)
    totalSupply Int    @default(10000)
    generations Int    @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
    repositoryId String

    @@unique([repositoryId, name], name: "collectionIdentifier")
}

model LayerElement {
    id       String @id @default(cuid())
    name     String @db.VarChar(255)
    priority Int    @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
    repositoryId String

    traitElements TraitElement[]

    @@unique([name, repositoryId])
    @@unique([priority, repositoryId])
}

model TraitElement {
    id String @id @default(cuid())

    name     String
    weight   Float   @default(1)
    readonly Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    layerElement   LayerElement @relation(fields: [layerElementId], references: [id], onDelete: Cascade)
    layerElementId String

    rulesPrimary   Rules[] @relation("primaryTraitElement")
    rulesSecondary Rules[] @relation("secondaryTraitElement")

    @@unique([name, layerElementId])
}

model Rules {
    id                      String       @id @default(cuid())
    condition               String
    primaryTraitElementId   String
    secondaryTraitElementId String
    primaryTraitElement     TraitElement @relation("primaryTraitElement", fields: [primaryTraitElementId], references: [id], onDelete: Cascade)
    secondaryTraitElement   TraitElement @relation("secondaryTraitElement", fields: [secondaryTraitElementId], references: [id], onDelete: Cascade)

    @@unique([primaryTraitElementId, secondaryTraitElementId])
}
